using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using DevExpress.XtraBars.Docking2010.Views;
using DevExpress.XtraBars;
using DevExpress.XtraBars.Navigation;
using System.Diagnostics;
using System.Runtime.InteropServices;
using FastColoredTextBoxNS;

namespace Exploit_Studio
{   

    public partial class Veil : DevExpress.XtraBars.Ribbon.RibbonForm
    {
        private IntPtr hWndParent;
        private IntPtr hWndOriginalParent;
        private IntPtr hWndDocked;
        private List<XtraUserControl> scripts;

        int GWL_STYLE = -16;

        public const uint WS_POPUP = 0x80000000;
        private const UInt32 WM_CLOSE = 0x0010;

        void CloseWindow(IntPtr hwnd)
        {
            SendMessage(hwnd, WM_CLOSE, IntPtr.Zero, IntPtr.Zero);
        }

        [DllImport("user32.dll")]
        public static extern IntPtr SetParent(IntPtr hWndChild, IntPtr hWndNewParent);

        [DllImport("user32.dll", SetLastError = true)]
        public static extern bool MoveWindow(IntPtr hWnd, int X, int Y, int nWidth, int nHeight, bool bRepaint);

        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern IntPtr SendMessage(IntPtr hWnd, uint msg, int wParam, string lParam);

        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern IntPtr SendMessage(IntPtr hWnd, uint msg, IntPtr IntPt, IntPtr lParam);

        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool PostMessage(IntPtr hWnd, uint Msg, IntPtr wParam, IntPtr lParam);

        [DllImport("user32.dll", CharSet = CharSet.Auto)]
        private static extern IntPtr FindWindowEx(IntPtr hwndParent, IntPtr hwndChildAfter, string lpszClass, string lpszWindow);

        [DllImport("USER32.DLL", CharSet = CharSet.Unicode)]
        public static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

        [DllImport("user32.dll")]
        static extern bool ShowWindowAsync(IntPtr hWnd, int nCmdShow);

        private void getRblx()
        {

            if (FindWindow(null, "ROBLOX") == IntPtr.Zero)
            {
                MessageBox.Show("Join a ROBLOX game before opening Exploit Studio!", "Cannot Find Roblox Window", MessageBoxButtons.OK, MessageBoxIcon.Error);
                this.Close();
            }

            if (hWndDocked != IntPtr.Zero) //don't do anything if there's already a window docked.
                return;
            hWndParent = IntPtr.Zero;

            while (hWndDocked == IntPtr.Zero)
            {
                hWndDocked = FindWindow(null, "ROBLOX");
            }
        }

        private void dockIt()
        {
            
            //Windows API call to change the parent of the target window.
            //It returns the hWnd of the window's parent prior to this call.
            hWndOriginalParent = SetParent(hWndDocked, gameUserControl.Handle);

            //Wire up the event to keep the window sized to match the control
            gameUserControl.SizeChanged += new EventHandler(gameUserControl_Resize);
            //Perform an initial call to set the size.
            gameUserControl_Resize(new Object(), new EventArgs());
            
        }

        private void gameUserControl_Resize(object sender, EventArgs e)
        {
            //Change the docked windows size to match its parent's size. 
            MoveWindow(hWndDocked, -8, -34, gameUserControl.Width+16, gameUserControl.Height+41, true);
        }

        XtraUserControl gameUserControl;
        public Veil()
        {
            InitializeComponent();
            gameUserControl = CreateUserControl("Game");
            scripts = new List<XtraUserControl>();
            accordionControl.SelectedElement = employeesAccordionControlElement;
            this.SizeChanged += Veil_SizeChanged;
            barEditItem2.AutoFillWidth = true;
            repositoryItemTextEdit3.KeyDown += repositoryItemTextEdit3_KeyDown;
        }

        private void Veil_SizeChanged(object sender, EventArgs e)
        {
            
        }

        private void repositoryItemTextEdit3_KeyDown(object sender, KeyEventArgs e)
        {
            if ((e.KeyCode == Keys.Return))
            {
                IntPtr hwndParent = FindWindow("kLBi2xP0o4czr7ckuzyF", null);
                IntPtr hWnd = FindWindowEx(hwndParent, IntPtr.Zero, "Edit", null);
                IntPtr hWnd2 = FindWindowEx(hwndParent, IntPtr.Zero, "Button", null);

                SendMessage(hWnd, 12u, 0, Convert.ToString(barEditItem2.EditValue));
                PostMessage(hWnd2, 513u, IntPtr.Zero, IntPtr.Zero);
                PostMessage(hWnd2, 514u, IntPtr.Zero, IntPtr.Zero);
            }
                
        }


        XtraUserControl CreateUserControl(string text)
        {
            XtraUserControl result = new XtraUserControl();
            result.Name = text.ToLower() + "UserControl";
            result.Text = text;
            LabelControl label = new LabelControl();
            label.Parent = result;
            label.Appearance.Font = new Font("Tahoma", 25.25F);
            label.Appearance.ForeColor = Color.Gray;
            label.Dock = System.Windows.Forms.DockStyle.Fill;
            label.AutoSizeMode = LabelAutoSizeMode.None;
            label.Appearance.TextOptions.HAlignment = DevExpress.Utils.HorzAlignment.Center;
            label.Appearance.TextOptions.VAlignment = DevExpress.Utils.VertAlignment.Center;
            label.Text = text;
            return result;
        }
        void accordionControl_SelectedElementChanged(object sender, SelectedElementChangedEventArgs e)
        {
            if (e.Element == null) return;
            XtraUserControl userControl = gameUserControl;
            tabbedView.AddDocument(userControl);
            tabbedView.ActivateDocument(userControl);

            foreach (XtraUserControl script in scripts)
            {
                XtraUserControl UserControl = script;
                tabbedView.AddDocument(UserControl);
                tabbedView.ActivateDocument(UserControl);
            }
        }
        void barButtonNavigation_ItemClick(object sender, ItemClickEventArgs e)
        {
            int barItemIndex = barSubItemNavigation.ItemLinks.IndexOf(e.Link);
            accordionControl.SelectedElement = mainAccordionGroup.Elements[barItemIndex];
        }
        void tabbedView_DocumentClosed(object sender, DocumentEventArgs e)
        {
            SetAccordionSelectedElement(e);
        }
        void SetAccordionSelectedElement(DocumentEventArgs e)
        {
            /*if (tabbedView.Documents.Count != 0)
            {
                if (e.Document.Caption == "Employees") accordionControl.SelectedElement = customersAccordionControlElement;
                else accordionControl.SelectedElement = employeesAccordionControlElement;
            }
            else
            {
                accordionControl.SelectedElement = null;
            }*/
        }

        private void Veil_Load(object sender, EventArgs e)
        {
            getRblx();
            Debug.WriteLine(FindWindow("kLBi2xP0o4czr7ckuzyF", null));
            if (FindWindow("kLBi2xP0o4czr7ckuzyF", null) == IntPtr.Zero)
            {
                injectVeil(Application.StartupPath + @"\data\veil\Veil.dll");
            
                Stopwatch sw = new Stopwatch(); // sw cotructor
            
                sw.Start(); // starts the stopwatch
                for (int i = 0; ; i++)
                {
                    if (i % 100000 == 0) // if in 100000th iteration (could be any other large number
                                         // depending on how often you want the time to be checked) 
                    {
                        sw.Stop(); // stop the time measurement
                        if (sw.ElapsedMilliseconds > 2000) // check if desired period of time has elapsed
                        {
                            break; // if more than 5000 milliseconds have passed, stop looping and return
                                   // to the existing code
                        }
                        else
                        {
                            sw.Start(); // if less than 5000 milliseconds have elapsed, continue looping
                                        // and resume time measurement
                        }
                    }
                }
            }
            dockIt();

            ShowWindowAsync(FindWindow("kLBi2xP0o4czr7ckuzyF", null), 0);

        }

        private void injectVeil(string injectorpath)
        {
            var procestoinjooct = Process.GetProcesses().First();
            var processes = Process.GetProcesses().Where(p => !string.IsNullOrEmpty(p.MainWindowTitle)).ToList();
            foreach (var process in processes)
            {
                var id = process.Id;
                var Wintitle = process.ProcessName;
                if (process.ProcessName == "RobloxPlayerBeta")
                {
                    if (process.MainWindowTitle == "ROBLOX")
                    {
                        procestoinjooct = process;
                    }
                }
            }
            GijSoft.DllInjection.DllInjectionResult f = new GijSoft.DllInjection.DllInjector().Inject(procestoinjooct.ProcessName, injectorpath);
            Debug.WriteLine(f);
        }

        private void dockPanel_Click(object sender, EventArgs e)
        {

        }

        protected override void OnFormClosing(FormClosingEventArgs e)
        {
            ShowWindowAsync(FindWindow("kLBi2xP0o4czr7ckuzyF", null), 6);
            SetParent(hWndDocked, hWndOriginalParent);

            MoveWindow(hWndDocked, 20, 20, 800, 600, true);

            base.OnFormClosing(e);

            Application.Exit();
            Process.GetCurrentProcess().Kill();
        }

        private void barButtonItem2_ItemClick(object sender, ItemClickEventArgs e)
        {
            // Part Button
            IntPtr hwndParent = FindWindow("kLBi2xP0o4czr7ckuzyF", null);
            IntPtr hWnd = FindWindowEx(hwndParent, IntPtr.Zero, "Edit", null);
            IntPtr hWnd2 = FindWindowEx(hwndParent, IntPtr.Zero, "Button", null);

            SendMessage(hWnd, 12u, 0, "TestPart = Instance.new(\"Part\", Workspace)\r\nTestPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame");
            PostMessage(hWnd2, 513u, IntPtr.Zero, IntPtr.Zero);
            PostMessage(hWnd2, 514u, IntPtr.Zero, IntPtr.Zero);
        }

        private void barButtonItem1_ItemClick(object sender, ItemClickEventArgs e)
        {
            int amount = 1;
            foreach(XtraUserControl script in scripts)
            {
                if(script.Name.StartsWith("new script"))
                    amount++;
            }
            XtraUserControl scriptUserControl;
            if (amount == 1)
            {
                scriptUserControl = CreateUserControl("New Script");
            } else
            {
                scriptUserControl = CreateUserControl("New Script (" + amount + ")");
            }
            FastColoredTextBox tb = new FastColoredTextBox();

            tb.Language = Language.Lua;
            tb.Text = "print(\"Hello World!\")";
            tb.Location = new Point(0, 0);
            tb.Visible = true;
            tb.Size = scriptUserControl.Size;

            scriptUserControl.Controls.Add(tb);
            scripts.Add(scriptUserControl);
            tabbedView.AddDocument(scriptUserControl);
            tabbedView.ActivateDocument(scriptUserControl);
        }

        private void barButtonItem3_ItemClick(object sender, ItemClickEventArgs e)
        {
            ShowWindowAsync(FindWindow("kLBi2xP0o4czr7ckuzyF", null), 6);
        }

        private void barButtonItem4_ItemClick(object sender, ItemClickEventArgs e)
        {
            ShowWindowAsync(FindWindow("kLBi2xP0o4czr7ckuzyF", null), 0);
        }

        private void barEditItem1_ItemClick(object sender, ItemClickEventArgs e)
        {

        }

        private void barEditItem2_ItemClick(object sender, ItemClickEventArgs e)
        {

        }
    }
}